#!/usr/bin/env bash

set -eu

if true || test -t 1; then
   SUCCESS="\e[32mSUCCESS\e[0m"
   FAILURE="\e[31mFAILURE\e[0m"
   PANIC="\e[34mPANIC\e[0m"
else
   SUCCESS="SUCCESS"
   FAILURE="FAILURE"
   PANIC="PANIC"
fi

readonly DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

readonly JAVADIR="$DIR/../lib/java.spfx/lang.java"
if [ ! -d "$JAVADIR" ]; then
    printf "[$PANIC] Cannot find directory $JAVADIR\n"
    exit 1
fi

readonly SUNSHINE_JAR="$DIR/../bin/org.metaborg.sunshine2-2.5.10.jar"
if [ ! -f "$SUNSHINE_JAR" ]; then
    printf "[$PANIC] Cannot find file $SUNSHINE_JAR\n"
    exit 1
fi

readonly SUNSHINE="java -jar $SUNSHINE_JAR"

statix check -I $DIR/../src/ java 2>&1 || {
    printf "[$PANIC] Cannot run statix or load spec\n"
    exit 1
}

if [[ "$OSTYPE" == "darwin"* ]]; then
    MKTEMP=gmktemp
    AWK=gawk
else
    MKTEMP=mktemp
    AWK=awk
fi

function expect {
    if [ $1 -eq 0 ]; then printf "pass"; else printf "fail"; fi
}

function agree {
    [ $1 -eq 0 -a $2 -eq 0 ] || [ $1 -ne 0 -a $2 -ne 0 ]
}

for testfile in "$@"; do
    testname="${testfile%.test}"
    testaterm="${testname}.aterm"

    ## find test expectation
    if (echo "$testname" | grep -sq "\.yes$") then
       positive=0
    elif (echo "$testname" | grep -sq "\.no$") then
       positive=1
    else
       printf "[$PANIC:EXPECTATION] $testname\n"
       exit 1
    fi
    echo "Expect $(expect $positive)"

    ## create test directory with sources
    if false;
    then
        echo "Use cached aterm"
    else
        ## create test directory
        testdir=$("$MKTEMP" -p . -d "${testname}.XXXXX.sources")

        ## create source directories
        sourcefiles=$("$AWK" 'match($0, /^\[([a-zA-Z0-9_\-\.\/]+)\]/, header){print header[1];}' "$testfile")
        for sourcefile in $sourcefiles; do
            sourcedir=$(dirname "$sourcefile")
            mkdir -p "${testdir}/${sourcedir}"
        done

        ## write sources
        (cd "$testdir"; "$AWK" 'match($0, /^\[([a-zA-Z0-9_\-\.\/]+)\]/, header){file=header[1];next;}{print >file;}') <"$testfile"
        javafiles="$(find "$testdir" -type f -name '*.java')"

        ## compile Java classes
        classes=$("$MKTEMP" -d -p . "${testname}.XXXXX.classes")
        javac -d "$classes" $javafiles 2>&1 | grep -v "Picked up JAVA_TOOL_OPTIONS" | tee "${testname}.javac.out"
        java_ok=${PIPESTATUS[0]}
        rm -rf "$classes"

        ## check if filenames and classnames correspond
        if (grep -s "should be declared in a file named" "${testname}.javac.out") then
            printf "[$PANIC:FILENAME] $testfile\n"
            exit 1
        fi

        ## check if test expectation and javac agree
        echo "javac $(expect $java_ok)"
        if ! agree $java_ok $positive; then
            printf "[$PANIC:DISAGREE] $testfile\n"
            continue
        fi

        ## parse java files to aterm
        printf "Program([" > "$testaterm"
        sep=""
        for javafile in $javafiles
        do
           filename="${javafile%.java}"
           aterm="$filename.aterm"
           echo "Parse $javafile to $aterm"
           javfile="$filename.jav"
           cp "$javafile" "$javfile"
           ${SUNSHINE} transform -n "Explicate injections" -l "${JAVADIR}" -p . -i "$javfile" 2>&1 >/dev/null | tee "$filename.parse.out"
           parse_ok=${PIPESTATUS[0]}
           if [ $parse_ok -ne 0 ]; then
               printf "[$PANIC:PARSE] Parsing failed for $javafile\n"
               continue 2
           fi
           rm -f "$javfile"
           printf "$sep" >> "$testaterm"
           if [ -z "$sep" ]; then sep=", "; fi
           cat "$aterm" >> "$testaterm"
        done
        printf "])" >> "$testaterm"

        ## remove test directory
        rm -rf "$testdir"

    fi

    ## Run Statix on the ATerm
    statix check -I $DIR/../src/ java "$testaterm" 2>&1 | tee "$testname.stx.out"
    stx_ok=${PIPESTATUS[0]}
    echo "Statix $(expect $stx_ok)"

    # compute test result by comparison
    if [ $stx_ok -eq 0 -o $stx_ok -eq 64 ]; then
        if agree $stx_ok $positive; then
            printf "[$SUCCESS] $testfile\n"
        else
            printf "[$FAILURE] $testfile\n"
        fi
    elif [ $stx_ok -eq 65 ]; then
        printf "[$PANIC:STUCK] $testfile\n"
    else
        printf "[$PANIC] Statix failed on $testfile\n"
    fi

done
