import stdlib.sets
import stdlib.paths
import stdlib.lists

import java.duplicates
import java.generics
import java.types.references
import java.classes.methods
import java.subtype

no-implements-cycle(s, type) :- {parents, matches}
  query s `IMPL+ as parents
  , filter parents ((name, intf) where intf == type) matches
  , empty(matches).

// interface-declaration-ok : scope * InterfaceDeclaration

interface-declaration-ok(s, id) :- id match
  { NormalInterface(interfaceModifiers, id, maybeTypeParameters, maybeExtendsInterfaces, interfaceMemberDeclarations) -> 
    {s_intf, s_this, self}
      interface-modifiers-ok(interfaceModifiers)

    // the declaration and prohibit duplicates
    , new s_intf -> (id, self)
    , s -[ `TYPE ]-> s_intf
    , no-duplicate-type(s, id, self)
    , no-implements-cycle(s_intf, self)

    // generics
    , maybe-type-parameters-ok(s, maybeTypeParameters, s_intf)

    // header
    , maybe-extends-interfaces-ok(s, maybeExtendsInterfaces, s_intf)

    , self == INTF(s_intf)
    , s_intf   -[ `SELF ]-> s_intf
    , s_intf   -[ `LEX  ]-> s

    // this
    , new s_this -> OBJECT(self)
    , s_intf -[ `THIS ]-> s_this
    
    // body
    , interface-member-declarations-ok(s_intf, interfaceMemberDeclarations)
  }. 

interface-modifiers-ok(ims) :- true.

// maybe-super-interfaces-ok maps super-interfaces-ok(*, list(*), *)

// TODO interfaces may not be named twice as super
maybe-super-interfaces-ok(s, si, s_this) :- si match
  { None()   -> true
  | Some(si) -> super-interfaces-ok(s, si, s_this)
  }.

// super-interfaces-ok : scope * SuperInterfaces * scope

super-interfaces-ok(s, si, s_this) :- si match
  { SuperInterface(classTypes) -> {types}
      class-types-ok(s, classTypes, types)
    , implement-interfaces(types, s_this)
  }.

// interface-member-declarations-ok maps interface-member-declaration-ok(*, list(*))

interface-member-declarations-ok(s, imds) :- imds match
  { []       -> true
  | imd:imds -> interface-member-declaration-ok(s, imd), interface-member-declarations-ok(s, imds)
  }.

// interface-member-declaration-ok : scope * InterfaceMemberDeclaration

interface-member-declaration-ok(s, imd) :- imd match
  { IMD2IMD(imd) -> interface-method-declaration-ok(s, imd)
  | CD2IMD(cd)   -> false // all classes in interfaces are static, not supported
  | ID2IMD(id)   -> false // idem, and same for fields
  | SemiColon()  -> true
  }.

interface-method-declaration-ok(s, imd) :- imd match
  { AbstractMethodDec(interfaceMethodModifiers, methodHeader, methodBody) -> {s_method, decl}
      new s_method -> decl
    , s_method -[ `LEX ]-> s
    , s -[ `METHOD ]-> s_method
    , method-header-ok(s_method, methodHeader, decl)
    , method-body-ok(s_method, methodBody)
  }.

// implement-interfaces maps implement-interface(list(*), *)

implement-interfaces(is, s_this) :- is match
  { []   -> true
  | i:is -> implement-interface(i, s_this), implement-interfaces(is, s_this)
  }.

// implement-interface : TYPE * scope

implement-interface(i, s_this) :- i match
  { OBJECT(INTF(s_intf)) -> {sigs, cls_mths, params}
      // mark the implements relation in the scope graph
      s_this -[ `IMPL ]-> s_intf 
      
      // Check that the class actually implements the interface;
      // we don't do overloading, or default methods, so
      // we just check for methods with the same name, and compatible types.
      // Any method with the same name and a non-compatible type results in an error.
      , interface-methods(s_intf, sigs)
      , class-methods(s_this, cls_mths)
      , every sigs (p_sig -> {id, mty}
          datum(p_sig, (id, mty))
          , cls-implements-sig(cls_mths, id, mty)
        )
  }.
  
cls-implements-sig(cls_mths, id, mty) :- mty match
  { METHOD(rty, params) -> 
     {rty', params', matches, p}
     // match a method by name
     filter cls_mths ((id', _) where id == id') matches
     , only(matches, p)
     , datum(p, (id, METHOD(rty', params')))
     
     // return type may differ covariantly
     , sub-type(rty', rty)

     // parameter types must match
     , pointwise-equal(params, params')
  }.
  
interface-methods(s_intf, mths) :-
  query s_intf `IMPL*`METHOD as mths.

class-methods(s_this, mths) :-
  query s_this `EXT*`METHOD as mths.

// maybe-extendsinterfaces-ok maps extends-interfaces-ok(*, list(*))

maybe-extends-interfaces-ok(s, ei, s_this) :- ei match
  { None()   -> true
  | Some(ei) -> extends-interfaces-ok(s, ei, s_this)
  }.

// extends-interfaces-ok : scope * ExtendsInterfaces * scope

extends-interfaces-ok(s, ei, s_this) :- ei match
  { ExtendsInterfaces(classTypes) -> {types}
      class-types-ok(s, classTypes, types)
    , implement-interfaces(types, s_this)
  }.
