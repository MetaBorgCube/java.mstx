import stdlib.paths

import java.generics
import java.names



// unann-type-ok : scope * UnannType

unann-type-ok(s, ut, ty) :- ut match
  { UPT2UT(upt) -> unann-primitive-type-ok(s, upt, ty)
  | URT2UT(urt) -> unann-reference-type-ok(s, urt, ty)
  }.



// primitive-type-ok : scope * PrimitiveType

primitive-type-ok(s, pt, ty) :- pt match
  { NumericType(annotations, nt) -> numeric-type-ok(s, nt, ty)
  | BooleanType(annotations)     -> ty == BOOLEAN()
  }.

// unann-primitive-type-ok : scope * UnannPrimitiveType

unann-primitive-type-ok(s, upt, ty) :- upt match
  { NumericType(nt) -> numeric-type-ok(s, nt, ty)
  | BooleanType()   -> ty == BOOLEAN()
  }.



// reference-type-ok : scope * ReferenceType * Type

reference-type-ok(s, rt, ty) :- rt match
  { CT2RT(ct) -> class-type-ok(s, ct, ty)
  | AT2RT(uat) -> array-type-ok(s, uat, ty)
  }.

// unann-reference-type-ok : scope * UnannReferenceType * Type

unann-reference-type-ok(s, urt, ty) :- urt match
  { UCT2URT(uct) -> unann-class-type-ok(s, uct, ty)
  | UAT2URT(uat) -> unann-array-type-ok(s, uat, ty)
  }.



// array-type-ok : scope * ArrayType * Type

array-type-ok(s, at, ty) :- at match
  { ArrayTypePrimitive(pt, annotatedDims) -> {ty'}
      primitive-type-ok(s, pt, ty')
    , annotated-dims-ok(annotatedDims, ty', ty)
  | ArrayTypeClassType(ct, annotatedDims) -> {ty'}
      class-type-ok(s, ct, ty')
    , annotated-dims-ok(annotatedDims, ty', ty)
  }.

// unann-array-type-ok : scope * UnannArrayType * Type

unann-array-type-ok(s, at, ty) :- at match
  { ArrayTypePrimitive(upt, annotatedDims) -> {ty'}
      unann-primitive-type-ok(s, upt, ty')
    , annotated-dims-ok(annotatedDims, ty', ty)
  | ArrayTypeClassType(uct, annotatedDims) -> {ty'}
      unann-class-type-ok(s, uct, ty')
    , annotated-dims-ok(annotatedDims, ty', ty)
  }.

annotated-dims-ok(dims, ty', ty) :- dims match
  { []     -> ty == ty'
  | _:dims -> annotated-dims-ok(dims, ARRAY(ty'), ty)
  }.


// numeric-type-ok : scope * NumericType

numeric-type-ok(s, nt, ty) :- nt match
  { Byte()   -> ty == BYTE()
  | Short()  -> ty == SHORT()
  | Int()    -> ty == INT()
  | Long()   -> ty == LONG()
  | Char()   -> ty == CHAR()
  | Float()  -> ty == FLOAT()
  | Double() -> ty == DOUBLE()
  }.



// class-types-ok maps class-type-ok(*, list(*)) == list(*)

class-types-ok(s, cts, tys) :- cts match
  { ct:cts' -> {ty, tys'}
      class-type-ok(s, ct, ty)
    , class-types-ok(s, cts', tys')
    , tys == ty:tys'
  | [] -> tys == []
  }.

// class-type-ok : scope * ClassType -> TYPE

class-type-ok(s, ct, ty) :- {decl, id', cls, mtas} ct match
  { ClassType(annotations, id, maybeTypeArguments) ->
      annotations == [],
      lexical-type-name(s, id, (id', cls))
    , mtas == maybeTypeArguments
  | ClassOrInterfaceTypeMember(classType, annotations, id, maybeTypeArguments) -> {s'}
      annotations == [],
      class-type-or-pkg-ok(s, classType, s')
    , member-type-name(s', id, (id', cls))
    , mtas == maybeTypeArguments
  }
, maybe-type-arguments-ok(s, mtas)
, ty == OBJECT(cls).

class-type-or-pkg-ok(s, ct, s') :- {name, mtas} ct match
  { ClassType(annotations, id, maybeTypeArguments) ->
      lexical-package-or-type-name(s, id, name)
    , mtas == maybeTypeArguments
  | ClassOrInterfaceTypeMember(classType, annotations, id, maybeTypeArguments) -> {s'}
      class-type-or-pkg-ok(s, classType, s')
    , member-package-or-type-name(s', id, name)
    , mtas == maybeTypeArguments
  }
, name match
    { PKG(decl') ->
        package-decl-scope(decl', s')
      , mtas == None()
    | TYPE(decl') -> {id', cls}
        type-decl-scope(decl', s')
      , maybe-type-arguments-ok(s, mtas)
    }.



// unann-class-type-ok : scope * UnannClassType

unann-class-type-ok(s, uct, ty) :- {p, id', cls, mtas} uct match
  { ClassType(id, maybeTypeArguments) ->
      lexical-type-name(s, id, (id', cls))
    , mtas == maybeTypeArguments
  | ClassOrInterfaceTypeMember(unannClassType, annotations, id, maybeTypeArguments) -> {s'}
      unann-class-type-or-pkg-ok(s, unannClassType, s')
    , member-type-name(s', id, (id', cls))
    , mtas == maybeTypeArguments
  }
, maybe-type-arguments-ok(s, mtas)
, ty == OBJECT(cls).

unann-class-type-or-pkg-ok(s, ct, s') :- {name, mtas} ct match
  { ClassType(id, maybeTypeArguments) ->
      lexical-package-or-type-name(s, id, name)
    , mtas == maybeTypeArguments
  | ClassOrInterfaceTypeMember(unannClassType, annotations, id, maybeTypeArguments) -> {s'}
      unann-class-type-or-pkg-ok(s, unannClassType, s')
    , member-package-or-type-name(s', id, name)
    , mtas == maybeTypeArguments
  }
, name match
    { PKG(decl') ->
        package-decl-scope(decl', s')
      , mtas == None()
    | TYPE(decl') -> {id', cls, tas}
        type-decl-scope(decl', s')
      , maybe-type-arguments-ok(s, mtas)
    }.


is-class-or-interface-type(tp) :- tp match
  { OBJECT(CLASS(_)) -> true
  | OBJECT(INTF(_))  -> true
  | _                -> false
  }.

is-interface-type(tp) :- tp match
  { OBJECT(INTF(_)) -> true
  | _               -> false }.

are-interface-types(tps) :- tps match
  { tp:tps    -> is-interface-type(tp), are-interface-types(tps)
  | []        -> true
  }.

type-scope(ty, s_ty) :- ty match
  { CLASS(s_cls) -> s_ty == s_cls
  | INTF(s_intf) -> s_ty == s_intf
  }.

instance-scope(ty, s_ty) :- ty match
  { OBJECT(tydecl) -> type-scope(tydecl, s_ty)
  }.

