import stdlib.paths
import java.names

package-declaration-ok(s, pd, s_pkg) :- {ids} pd match
  { None() ->
      ids == "":[] // anonymous package
  | Some(PackageDeclaration(annotations, ids')) ->
      ids == ids'
  }
, package-decl(s, ids, s_pkg).

package-decl(s, ids, s_pkg) :- ids match
  { id:[] ->
      s_pkg -> (id, PKG(s_pkg))
    , s -[ `PKG ]-> s_pkg
    , compose-package(s, id, s_pkg)
  | id:ids -> {s_pkg'}
      new s_pkg' -> (id, PKG(s_pkg'))
    , s -[ `PKG ]-> s_pkg'
    , compose-package(s, id, s_pkg')
    , package-decl(s_pkg', ids, s_pkg)
  }.

compose-package(s, id, s_pkg) :- {pkgs, idpkgs}
  query s
        `PKGC? `PKG
        as pkgs
, filter pkgs ((id', PKG(s_pkg')) where id' == id, s_pkg' != s_pkg) idpkgs
, every idpkgs (p -> {decl, s_pkg'}
    datum(p, decl)
  , package-decl-scope(decl, s_pkg')
  , s_pkg -[ `PKGC ]-> s_pkg'
  ).
