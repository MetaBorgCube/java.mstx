import stdlib.sets

import java.duplicates
import java.generics
import java.interfaces
import java.types.references

import java.classes.constructors
import java.classes.fields
import java.classes.methods
import java.classes.this

// class-declaration-ok : scope * ClassDeclaration

class-declaration-ok(s, cd) :- cd match
  { NCD2CD(ncd) -> normal-class-declaration-ok(s, ncd)
  }.

no-class-cycle(s, type) :- {parents, matches}
  query s `EXT+ as parents
, filter parents ((name, cls) where cls == type) matches
, empty(matches).

// normal-class-declaration-ok : scope * NormalClassDeclaration

normal-class-declaration-ok(s_pkg, ncd) :- ncd match
  { ClassDeclaration(modifiers, id, mTypeParameters, mSuperClass, mSuperInterfaces, declarations) -> 
    {s_cls, s_header, s_this, self}
      class-modifiers-ok(modifiers)

    , new s_header
    , new s_cls -> (id, self)

    // the declaration and prohibit duplicates
    , s_pkg -[ `TYPE ]-> s_cls
    , no-duplicate-type(s_pkg, id, self)
    , no-class-cycle(s_cls, self)

    // generics
    , maybe-type-parameters-ok(s_header, mTypeParameters)

    // check the header
    , maybe-super-class-ok(s_header, mSuperClass, s_cls)
    , maybe-super-interfaces-ok(s_header, mSuperInterfaces, s_cls)

    , self == CLASS(s_cls)
    , s_cls    -[ `SELF ]-> s_cls
    , s_cls    -[ `LEX  ]-> s_header
    , s_header -[ `LEX  ]-> s_pkg

    // this
    , new s_this -> OBJECT(self)
    , s_cls -[ `THIS ]-> s_this

    // body
    , class-body-declarations-ok(s_cls, declarations)
  }. 

class-modifiers-ok(cms) :- cms match
  { Public():[] -> true
  }.

// maybe-super-class-ok maps super-class-ok(*, list(*), *)

maybe-super-class-ok(s, sc, s_this) :- sc match
  { None()   -> true
  | Some(sc) -> super-class-ok(s, sc, s_this)
  }.

// superclass-ok : scope * SuperClass * scope

super-class-ok(s, sc, s_this) :- sc match
  { SuperClass(classType) -> {s_super}
      class-type-ok(s, classType, OBJECT(CLASS(s_super)))
    , s_this -[ `EXT ]-> s_super
  }.

// class-body-declarations-ok maps class-body-declaration-ok(*, list(*))

class-body-declarations-ok(s, cbds) :- cbds match
  { []       -> true
  | cbd:cbds -> class-body-declaration-ok(s, cbd), class-body-declarations-ok(s, cbds)
  }.

// class-body-declaration-ok : scope * ClassBodyDeclaration

class-body-declaration-ok(s, cbd) :- cbd match
  { CMD2CBD(cmd) -> class-member-declaration-ok(s, cmd)
  | CD2CBD(cd) -> constructor-declaration-ok(s, cd)
  }.

// class-member-declaration-ok : scope * ClassMemberDeclaration

class-member-declaration-ok(s, cmd) :- cmd match
  { FD2CMD(fd) -> field-declaration-ok(s, fd)
  | MD2CMD(md) -> method-declaration-ok(s, md)
  | CD2CMD(cd) -> class-declaration-ok(s, cd)
  | ID2CMD(id) -> interface-declaration-ok(s, id)
  | SemiColon() -> true
  }.
