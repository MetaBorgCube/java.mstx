import stdlib.paths
import stdlib.sets

import java.types.references

order typeord lexico(
  `TYPE < `LEX, `TYPE < `EXT, `TYPE < `IMP, 
  `TYPE < `IMPL, `EXT < `LEX, `IMPL < `LEX, `IMP < `LEX
  )

order pkg-or-type-ord lexico(
  `PKG < `LEX, `TYPE < `LEX, `TYPE < `EXT, `TYPE < `IMP, 
  `TYPE < `IMPL, `EXT < `LEX, `IMPL < `LEX, `IMP < `LEX
  )

order expr-ord lexico(
  `VAR < `LEX, `FIELD < `LEX, `VAR < `EXT, `FIELD < `EXT, `EXT < `LEX
  )

order amb-ord lexico(
  `VAR < `LEX, `FIELD < `LEX, `VAR < `EXT, `FIELD < `EXT, `EXT < `LEX, 
  `PKG < `LEX, `TYPE < `LEX, `TYPE < `EXT, `TYPE < `IMP, `TYPE < `IMPL, 
  `EXT < `LEX, `IMPL < `LEX, `IMP < `LEX
  )

// package-name-ok : scope * PackageName * (string * Type)

package-name-ok(s, pn, decl) :- pn match
  { PackageName(id) ->
      lexical-package-name(s, id, decl)
  | PackageName(pn, id) -> {decl', s_pkg}
      package-name-ok(s, pn, decl')
    , package-decl-scope(decl', s_pkg)
    , member-package-name(s_pkg, id, decl)
  }.

lexical-package-name(s, id, decl) :- {pkgs, idpkgs, idpkgs'}
  query s
        (`LEX|`CU)* `PKG // LEX-PKG-RE
        as pkgs
, filter pkgs ((id', _) where id' == id) idpkgs
, min idpkgs lexico(
        `PKG < `LEX // PKG-ORD
      ) idpkgs'
, paths-to-package-name(idpkgs', decl).

member-package-name(s, id, decl) :- {pkgs, idpkgs}
  query s
        `IMP? `PKG // MEM-PKG-RE
        as pkgs
, filter pkgs ((id', _) where id' == id) idpkgs
, paths-to-package-name(idpkgs, decl).

paths-to-package-name(ps, decl) :- {id, s_pkg}
  new s_pkg -> decl
, decl == (id, PKG(s_pkg))
, every ps (p -> {decl', s_pkg'}
             datum(p, decl')
           , package-decl-scope(decl', s_pkg')
           , s_pkg -[ `IMP ]-> s_pkg'
           ).



// type-name-ok : scope * TypeName * (string * Type)

type-name-ok(s, tn, decl) :- tn match
  { TypeName(id) ->
      lexical-type-name(s, id, decl)
  | TypeName(ptn, id) -> {decl', s', types, idtypes}
      package-or-type-name-ok(s, ptn, decl')
    , decl' match
        { PKG(decl')  -> package-decl-scope(decl', s')
        | TYPE(decl') -> type-decl-scope(decl', s')
        }
    , member-type-name(s', id, decl)
  }.

lexical-type-name(s, id, decl) :- {types, idtypes, idtypes'}
  query s
        (`LEX|`CU)* `IMP? `EXT* `IMPL* `TYPE // LEX-TYPE-RE
        as types
, filter types ((id', _) where id' == id) idtypes
, min idtypes @typeord idtypes'
, paths-to-type-name(idtypes', decl).

member-type-name(s, id, decl) :- {types, idtypes, idtypes'}
  query s
        `EXT* `IMPL* `TYPE // MEM-TYPE-RE
        as types
, filter types ((id', _) where id' == id) idtypes
, min idtypes @typeord idtypes'
, paths-to-type-name(idtypes, decl).

paths-to-type-name(ps, decl) :- {p}
  only(ps, p)
, datum(p, decl).



// package-or-type-name-ok : scope * PackageOrTypeName * Name

package-or-type-name-ok(s, ptn, name) :- ptn match
  { PackageOrTypeName(id) -> 
    // Type -> TypeName
    // -> PackageName
    lexical-package-or-type-name(s, id, name)
  | PackageOrTypeName(ptn, id) -> {name'}
    // Type =>
    //   -> TypeName
    // Pkg =>
    //   Type -> TypeName
    //   -> PackageName
      package-or-type-name-ok(s, ptn, name')
    , name' match
        { PKG(decl') -> {s_pkg}
            package-decl-scope(decl', s_pkg)
          , member-package-or-type-name(s_pkg, id, name)
        | TYPE(decl') -> {s_ty, decl''}
            type-decl-scope(decl', s_ty)
          , member-type-name(s_ty, id, decl'')
          , name == TYPE(decl'')
        }
  }.

lexical-package-or-type-name(s, id, name) :- 
  {names, id-names, id-names', id-names'', l}
  query s
    (`LEX|`CU)* `PKG | (`LEX|`CU)* `IMP? `EXT* `IMPL* `TYPE // LEX-PKG-OR-TYPE-RE
    as names
  , filter names ((id', _) where id' == id) id-names
  , min id-names reverse-lexico(`TYPE < `PKG) id-names'
  , min id-names' @pkg-or-type-ord id-names''
  , inhabited(id-names'')
  , every id-names'' (p -> tgt-lbl(p, l))
  , l match
    { `TYPE -> {decl}
        paths-to-type-name(id-names'', decl)
      , name == TYPE(decl)
    | `PKG  -> {decl}
        paths-to-package-name(id-names'', decl)
      , name == PKG(decl)
    }.

member-package-or-type-name(s, id, name) :- 
  {names, id-names, id-names', id-names'', l}
  query s
    `IMP? `PKG | `EXT* `IMPL* `TYPE // MEM-PKG-OR-TYPE-RE
    as names
  , filter names ((id', _) where id' == id) id-names
  , min id-names reverse-lexico(`TYPE < `PKG) id-names'
  , min id-names' @pkg-or-type-ord id-names''
  , inhabited(id-names'')
  , every id-names'' (p -> tgt-lbl(p, l))
  , l match
    { `TYPE -> {decl}
        paths-to-type-name(id-names'', decl)
      , name == TYPE(decl)
    | `PKG  -> {decl}
        paths-to-package-name(id-names'', decl)
      , name == PKG(decl)
    }.



// expression-name-ok : scope * ExpressionName * (string * Type)

expression-name-ok(s, en, decl) :- en match
  { ExpressionName(id) ->
      lexical-expression-name(s, id, decl)
  | ExpressionName(an, id) -> {name'}
      ambiguous-name-ok(s, an, name')
    , name' match
        { EXPR(decl') -> {s_ty}
            expr-decl-scope(decl', s_ty)
          , member-expression-name(s_ty, id, decl)
        }
  }.

lexical-expression-name(s, id, decl) :- {names, id-names, id-names'}
  query s
        `LEX* `EXT* (`VAR|`FIELD) // LEX-EXPR-RE
        as names
, filter names ((id', _) where id' == id) id-names
, min id-names @expr-ord id-names'
, paths-to-expression-name(id-names', decl).

member-expression-name(s, id, decl) :- {names, id-names, id-names'}
  query s
        `EXT* (`VAR|`FIELD) // MEM-EXPR-RE
        as names
, filter names ((id', _) where id' == id) id-names
, min id-names @expr-ord id-names'
, paths-to-expression-name(id-names', decl).

paths-to-expression-name(ps, decl) :- {p}
  only(ps, p)
, datum(p, decl).



// ambiguous-name-ok : scope * AmbiguousName * Name

ambiguous-name-ok(s, an, name) :- an match
  { AmbiguousName(id) -> {names, id-names, id-names', id-names'', l}
    // local Var -> ExpressionName
    // static import Var -> ExpressionName
    // local Type -> TypeName
    // (static) import Type -> TypeName
    // -> PackageName
      query s
            (`LEX|`CU)* `PKG | (`LEX|`CU)* `IMP? `EXT* `IMPL* `TYPE | `LEX* `EXT* (`VAR|`FIELD) // AMB-RE
            as names
    , filter names ((id', _) where id' == id) id-names
    , min id-names reverse-lexico(
            `VAR < `TYPE, `VAR < `PKG, `FIELD < `TYPE, `FIELD < `PKG, `TYPE < `PKG
          ) id-names'
    , min id-names' @amb-ord id-names''
    , inhabited(id-names'')
    , every id-names'' (p -> tgt-lbl(p, l))
    , l match
        { `VAR -> {decl}
            paths-to-expression-name(id-names'', decl)
          , name == EXPR(decl)
        | `FIELD -> {decl}
            paths-to-expression-name(id-names'', decl)
          , name == EXPR(decl)
        | `TYPE -> {decl}
            paths-to-type-name(id-names'', decl)
          , name == TYPE(decl)
        | `PKG -> {decl}
            paths-to-package-name(id-names'', decl)
          , name == PKG(decl)
        }
  | AmbiguousName(an, id) -> {name'}
    // Pkg =>
    //   local Type -> TypeName
    //   -> PackageName
    // Type =>
    //   Var (+ Method?) -> ExpressionName
    //   Type -> TypeName
    // Var =>
    //   -> ExpressionName
      ambiguous-name-ok(s, an, name')
    , name' match
        { EXPR(decl') -> {s_ty, decl''}
            expr-decl-scope(decl', s_ty)
          , member-expression-name(s_ty, id, decl'')
          , name == EXPR(decl'')
        }
  }.



// method-name-ok : scope * MethodName * path

method-name-ok(s, mn, p) :- mn match
  { MethodName(id) ->
      false
  }.



// helper functions from declarations to scopes

expr-decl-scope(decl, s_ty) :- decl match
  { (_, ty) -> instance-scope(ty, s_ty)
  }.

type-decl-scope(decl, s_ty) :- decl match
  { (_, CLASS(s)) -> s_ty == s
  | (_, INTF(s))  -> s_ty == s
  }.

package-decl-scope(decl, s_pkg) :- decl match
  { (_, PKG(s)) -> s_pkg == s
  }.
