import stdlib.paths

import java.classes.this
import java.expressions.variables
import java.generics
import java.literals
import java.names
import java.subtype
import java.types.references

// expressions-ok : scope * list(Expression) * list(Type)

expressions-ok(s, es, tys) :- es match
  { []   -> tys == []
  | e:es -> {ty, tys'}
      expression-ok(s, e, ty)
    , expressions-ok(s, es, tys')
    , tys == ty:tys'
  }.

// expression-ok : scope * Expression * Type

expression-ok(s, e, ty) :- e match
  { Eq(e1, e2) -> {ty1, ty2}
      expression-ok(s, e1, ty1)
    , expression-ok(s, e2, ty2)
    , false // how should ty1 & ty2 agree?
    , ty == BOOLEAN()
  | This() ->
      this-type(s, ty)
  | QThis(typeName) -> {x, x', ty_this}
      type-name-ok(s, typeName, (x', ty))
    , this-type(s, ty_this)
    , sub-type(ty_this, ty)
  | CastPrimitive(primitiveType, e) -> {ty_e}
      primitive-type-ok(s, primitiveType, ty)
    , expression-ok(s, e, ty_e)
    , sub-type(ty_e, ty)
  | CastReference(referenceType, additionalBounds, e) -> {ty_e}
      additionalBounds == [] // ????
    , reference-type-ok(s, referenceType, ty)
    , expression-ok(s, e, ty_e)
    , sub-type(ty_e, ty)
  | Assign(lhs, e) -> {ty_e}
      lhs-ok(s, lhs, ty)
    , expression-ok(s, e, ty_e)
    , sub-type(ty_e, ty)
  | FA2E(fieldAccess) ->
      field-access-ty(s, fieldAccess, ty)
  | UI2E(unqualifiedInstance) ->
      unqualified-instance-ok(s, unqualifiedInstance, ty)
  | QualifiedInstance(e, unqualifiedInstance) -> {ty_e, s_ty}
      expression-ok(s, e, ty_e)
    , instance-scope(ty_e, s_ty)
    , qualified-instance-ok(s, unqualifiedInstance, s_ty, ty)
  | L2E(literal) ->
      literal-type(s, literal, ty)
  | EN2E(en) -> {x}
      expression-name-ok(s, en, (x, ty))
  }.

lhs-ok(s, lhs, ty) :- lhs match
  { EN2LHS(expressionName) -> {x, p}
      expression-name-ok(s, expressionName, p)
    , datum(p, (x, ty))
  | FA2LHS(fieldAccess) ->
      field-access-ty(s, fieldAccess, ty)
  }.

// field-access-ty : scope * FieldAccess * Type

field-access-ty(s, fa, ty) :- {p} 
  fa match
    { Field(e, id) -> {s_type, reached, tydecl, id'}
        expression-ok(s, e, OBJECT(tydecl))
      , type-scope(tydecl, s_type)
      , query s_type `EXT*`FIELD as reached
      , unambiguous-field(reached, id, (id', ty))
    | SuperField(id) -> {super, tydecl, reached, id'}
        super-type(s, OBJECT(tydecl))
      , type-scope(tydecl, super)
      , query super `EXT*`FIELD as reached
      , unambiguous-field(reached, id, (id', ty))
    // | QSuperField(typeName, id) -> {ty_this, reached, s_cls, p, x}
    //     ...
    }.

unambiguous-field(reached, id, decl) :- {matched, visible, p}
  filter reached ((id', _) where id' == id) matched
, min matched
      lexico( `VAR < `LEX, `VAR < `EXT
            , `EXT < `LEX
            )
      visible
, only(visible, p)
, datum(p, decl).

unqualified-instance-ok(s, ui, ty) :- ui match
  { NewInstance(maybeTypeArguments, annotations, id, qualifiedIds, maybeTypeArgumentsOrDiamond, expressions) ->
    {classType, tys, tydecl}
    // instantiated type
      instance-type-ok(s, id, qualifiedIds, tydecl)
    , maybe-type-arguments-ok(s, maybeTypeArguments)

    , expressions-ok(s, expressions, tys)
    // TODO constructor checking

    , ty == OBJECT(tydecl)
  }.

qualified-instance-ok(s, ui, s_cls, ty) :- ui match
  { NewInstance(maybeTypeArguments, annotations, id, qualifiedIds, maybeTypeArgumentsOrDiamond, expressions) ->
    {classType, tys, tydecl}
    // instantiated type
      instance-type-ok(s_cls, id, qualifiedIds, tydecl)
    , maybe-type-arguments-ok(s, maybeTypeArguments)
    , expressions-ok(s, expressions, tys)
    // TODO constructor checking

    , ty == OBJECT(tydecl)
  }.

// so much duplication down here

instance-type-ok(s, id, qids, ty) :- qids match
  { [] -> {id'}
      lexical-type-name(s, id, (id', ty))
  | QualifiedId(_, id'):qids -> {name, s'}
      lexical-package-or-type-name(s, id, name)
    , name match
        { PKG(decl') ->
            package-decl-scope(decl', s')
          , instance-type-ok(s', id', qids, ty)
        | TYPE(decl') -> {ty'}
            type-decl-scope(decl', s')
          , instance-type-ok2(s', id', qids, ty)
        }
  }.

instance-type-ok2(s, id, qids, ty) :- qids match
  { [] -> {id'}
      member-type-name(s, id, (id', ty))
  | QualifiedId(_, id'):qids -> {decl, s'}
      member-type-name(s, id, decl)
    , type-decl-scope(decl, s')
    , instance-type-ok2(s', id', qids, ty)
  }.

